
I am trying to set up the Cognito SDK in our Angular project.

I'm starting with the "Identity SDK for Javascript"

    "npm install --save-dev webpack json-loader"
    "npm install --save amazon-cognito-identity-js"

        I ran both of these in the root-directory of the project

    Next, I am supposed to add a file called "webpack.config.js"

        It appears, however, that Angular already created this file

        Although the contents are very different

    Then, I am to create an empty file "entry.js" in the "src" directory (also created by angular)

        This file is referenced in the "webpack" file in the instructions,
        but Angular's "webpack" references a different file, also in "src", which already exists

        So, for now, I think I'll just leave both of these files as is, and not create "entry.js"

    Finally, I was supposed to add a "build" script to "package.json", but, once again, one was already there.

        So I'll also leave this file as-is, and just see if this works


I'll be putting all the logic in "dashboard.component.ts",
since that's where the Cognito login-page redirects

The server wouldn't start because "require" couldn't be found

    "npm install @types/node --save-dev"

    and then adding "node" to "types in "tsconfig.app.json" fixed it.

    

NOTE: I have yet to touch "Auth SDK for Javascript"

Another Note: I have found that Identity doesn't work at all withouth Auth!

    The "CognitoUserPool" method of "AmazonCognitoIdentity" returns nothing.

So, I'm going to set that up now.


So it turns out I wasn't supposed to use the sdk at all!

The Cognito UI actually returns the token in the callback URL as a parameter

    This paramter was just getting deleted because of some redirection that we were doing with the routing-module

    I tinkered around with the routing-module, and eventually got it to stop deleting the id_token


Then, I went to retrieve the id_token parameter from the url using a method I had found before for other parts of the website,

    and it didn't work.

    I eventually figured out that the method was not retrieving the paramter from the URL because, for some reason,

    cognito was using a '#' instead of '?' at the beginning of the list of parameters

        (I confirmed this by changing the '#' to '?', reloading the page, and it worked perfectly)


So I decided to just get the entire callback-url, and parse it manually.

    This was actually far more complicated than I expected it to be.

    "ActivatedRoute.url" does indeed return the url, but not as a string, but rather as an Observable<UrlSegment[]>

    I remembered from work that I had done with getting the url parameters that "ActivatedRoute" actually had a "snapshot" member
    that gives access to the page at the moment it is called, rather than instantiating an observer to repeatedly retrieve data over time.

    
