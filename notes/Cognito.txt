
I am trying to set up the Cognito SDK in our Angular project.

I'm starting with the "Identity SDK for Javascript"

    "npm install --save-dev webpack json-loader"
    "npm install --save amazon-cognito-identity-js"

        I ran both of these in the root-directory of the project

    Next, I am supposed to add a file called "webpack.config.js"

        It appears, however, that Angular already created this file

        Although the contents are very different

    Then, I am to create an empty file "entry.js" in the "src" directory (also created by angular)

        This file is referenced in the "webpack" file in the instructions,
        but Angular's "webpack" references a different file, also in "src", which already exists

        So, for now, I think I'll just leave both of these files as is, and not create "entry.js"

    Finally, I was supposed to add a "build" script to "package.json", but, once again, one was already there.

        So I'll also leave this file as-is, and just see if this works


I'll be putting all the logic in "dashboard.component.ts",
since that's where the Cognito login-page redirects

The server wouldn't start because "require" couldn't be found

    "npm install @types/node --save-dev"

    and then adding "node" to "types in "tsconfig.app.json" fixed it.

    

NOTE: I have yet to touch "Auth SDK for Javascript"

Another Note: I have found that Identity doesn't work at all withouth Auth!

    The "CognitoUserPool" method of "AmazonCognitoIdentity" returns nothing.

So, I'm going to set that up now.


So it turns out I wasn't supposed to use the sdk at all!

The Cognito UI actually returns the token in the callback URL as a parameter

    This paramter was just getting deleted because of some redirection that we were doing with the routing-module

    I tinkered around with the routing-module, and eventually got it to stop deleting the id_token


Then, I went to retrieve the id_token parameter from the url using a method I had found before for other parts of the website,

    and it didn't work.

    I eventually figured out that the method was not retrieving the paramter from the URL because, for some reason,

    cognito was using a '#' instead of '?' at the beginning of the list of parameters

        (I confirmed this by changing the '#' to '?', reloading the page, and it worked perfectly)


So I decided to just get the entire callback-url, and parse it manually.

    This was actually far more complicated than I expected it to be.

    "ActivatedRoute.url" does indeed return the url, but not as a string, but rather as an Observable<UrlSegment[]>

    I remembered from work that I had done with getting the url parameters that "ActivatedRoute" actually had a "snapshot" member
    that gives access to the page at the moment it is called, rather than instantiating an observer to repeatedly retrieve data over time.

        
The Public keys for our user pool
Cognito generates two key pairs for each pool

{"keys":[{"alg":"RS256","e":"AQAB","kid":"EW/B56jWWbsJ/19BsgJHbbgQi/6GKHG/g7MU05Wtrpc=","kty":"RSA","n":"4FeGrqy3p_7EsHGruMzekLZRJxVIzBFRqJ2Ymmn4YKPpFbdd6H_rwEU61pYCVlgjvrXGHoHLGtgcX9G0rr66AMtmcAwklQcmYYSXOAkCCKKu_W5774msP4yP8VrEywBS9OWNSN18U6ufLmpqVQHOOFUEuS6kNzWTjmRcDeeVK5la9KFp-XfYWFIW0g-gpZe6ULttHPb_K9QzzRTMfZBbBSjyAMm_7GvwEfi7j2gtpBxdTeC7QVKzDogStk9iIzitz9d3HBwLRMS1xAPk-8lIwggwlrwIoFHqgaxp8wrGbb9HyptHZaYKC5FQr8RAwxoBoL6-1GcNot9XbNI1E0KrTw","use":"sig"},{"alg":"RS256","e":"AQAB","kid":"ujuaMaKK31+yaW2wqPMFIYCHvC+fzfTplGXLqRy8Vzw=","kty":"RSA","n":"nra2jPAeeXoSSJ8Hvkut0kEbAl-Ar0mAUev5-jfTElkzeOxEXusTYydpQIygNovJPJ8Yd1qJ7vzZl3DxILIjCp5_Uob-JoL-Wy-edLVqEdDCTbJURGznaZA6aXUvz5trupbR4pmsVVZPDRcAqVlFm1pW0rXYfxlksRXJ1MZz6C3Wp_VwY6F7eXGPDYVbcQxg6tYsuPNB8iFN51m0Ez-VWwOEODvIhrdFOc58g-7C7CO6j0BJbm-6Bd4o1wMmu-TmrtS2NNVcqAfofJGxOwQRpCB24R7zGez0ZjuR7o6YiiH-Chv_TfmAGGpvWu52-lC-G4-JaLgUJJCNbq1bPYFzRQ","use":"sig"}]}
        
These will always be accessible at "https://cognito-idp.us-east-1.amazonaws.com/us-east-1_lDZasLc5x/.well-known/jwks.json"

I also stored them more readibly in "/src/user_pool_public_keys.txt"        

        


        
authData = {

    ClientId: "1e6q1kkegc508q4je1u9mrhr78",
    AppWebDomain: "https://partners-softwareaggov.auth.us-east-1.amazoncognito.com",
    TokenScopesArray: [ "phone", "email", "openid", "aws.cognito.signin.user.admin", "profile" ],
    RedirectUriSignIn: "http://localhost:4200/dashboard",
    RedirectUriSignOut: "https://partners-softwareaggov.auth.us-east-1.amazoncognito.com",
    UserPoolId: "us-east-1_lDZasLc5x",
    AdvancedSecurityDataCollectionFlag: true,
    Storage: null
}
        

To save the json to a file, I installed the "file-system" package.

    There is, however, something wrong with the newest version.

    To solve it, I added

        node: {
        fs: 'empty'
        }

    to my webpack.config.js


I decided to store the tokens that cognito passes back in a cookie.

    The structure of the token can be found at: "https://docs.aws.amazon.com/cognito/latest/developerguide/amazon-cognito-user-pools-using-tokens-with-identity-providers.html"


Our current flow for the login is: Cognito -> callback -> callback-buffer -> create-lead -> dashboard


I ran into a host of problems trying to make REST calls from our "create-leads" component

    I got a strange error: "cannot read property 'message' of undefined"

    I searched and searched online and nobody appeared to have had this problem before

    I checked my syntax over and over to make sure I had made no mistakes, and still couldn't get it to work.

    So, I spun up an entirely new Angular-project, and tried making the call from there with the exact same code.

        And it worked!

    So, I determined that it had to be some file that we were importing globally that was causing the error
    
        We had installed a couple of interceptors, and I didn't understand well at all how they worked, so I commented both of them out completely.

        The error finally changed, but it still didn't work.

        I searched online for this new error, and still nothing.

        So, I went slowly and carefully through the list of modules we had imported in "app.module.ts"

            I commented out this one: "HttpClientInMemoryWebApiModule"

        And finally the REST call worked.


Now, I tried making the REST call to the server

    I tried the "getLeads" API

    I didn't work and threw the error: "blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource."

        I still don't fully understand what CORS is, but by appending "https://cors-anywhere.herokuapp.com/" to the beginning of the URL,

            I got it working.